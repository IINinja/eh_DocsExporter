[
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/quick_start/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "There are some different ways of installing the plugin. The easiest one is downloading it from Godot\u0026rsquo;s Asset Library directly from your project.\nClick the Asset Library button inside the editor and in the search field begin typing eh_DocsExporter to find it.\nAfter clicking on it, click on the download button and a bar with the downloading plugin will appear at the bottom of the AssetLib\nAfter it finishes downloading click install. It will bring up a list of files it will import. You don\u0026rsquo;t need to import the files outside of the \u0026ldquo;addons\u0026rdquo; folder, your project should already have it\u0026rsquo;s own and README and LICENSE files.\nAlso if you downloaded any other plugin by me chances are you already have a eh_jogos.shared_variables folder (at the bottom of the list). These are scripts for Custom Resources I reuse in projects and you can ignore any conflicts in this folder, and just import the files that are new to this plugin, if there are any. Or if you\u0026rsquo;re in doubt you can safely overwrite all the files in it by importing them again\nAfter installation go to Project \u0026gt; Project Settings \u0026gt; Plugin and enable the plugin\nAfter you enable it, a new tab will appear named Docs Exporter and that\u0026rsquo;s it for installation!\nAlternatively, you can just download this repository as a zip, and extract it and copy the addons folder into your project, or clone this repository into your project as a sub-module.\nAfter either, go to Project \u0026gt; Project Settings \u0026gt; Plugin and enable the plugin\n"
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/quick_start/",
	"title": "Quick_start",
	"tags": [],
	"description": "",
	"content": "Quick Start Here you\u0026rsquo;ll find some quick guides to get you up and running with the plugin.\n Installation Documenting your code Exporting your Documentation Help and Support  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/",
	"title": "eh_DocsExporter",
	"tags": [],
	"description": "",
	"content": "Docs Exporter is a Godot plugin compatible with Godot 3.2.x aimed at building and exporting documentation directly from your code to a GitHub wiki and/or a Hugo site.\nIt is inspired by and partly based on GDQuest\u0026#39;s docs maker but works entirely inside Godot, and tries to follow Godot\u0026rsquo;s official docs styling for exported pages.\nThe \u0026ldquo;Reference\u0026rdquo; section of this wiki was generated and exported using this plugin. To see an example of the GitHUb wiki export you can go to the github wiki of the project repository.\n"
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/arrayvariable/",
	"title": "ArrayVariable",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Array that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     Array value []    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default []   Setter _set_value    Shared Variable value\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/boolvariable/",
	"title": "BoolVariable",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Boolean that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     bool value True    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default True   Setter _set_value    Shared Variable value\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/boolvariablecheckbox/",
	"title": "BoolVariableCheckbox",
	"tags": [],
	"description": "",
	"content": "Inherits: CheckBox \u0026gt; Button \u0026gt; BaseButton \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription Editor Field for checkbox, associated with a respective BoolVariable, used by the Docs Exporter tab in the Project Settings.\nProperties    type property default value     BoolVariable bool_reference Null    Properties Descriptions bool_reference  BoolVariable bool_reference  BoolVariable responsible for serving as a shared variable for this option.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/custom-resources/categoryoptionaldata/",
	"title": "CategoryOptionalData",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Struct to hold optional data for categories, like descriptions or weight to be used in HUGO\nProperties    type property default value     int weight 0   String description \u0026quot;\u0026quot;    Signals  struct_updated()  Signal emitted whenever any struct variable is changed.\n Properties Descriptions weight  int weight           Default 0   Setter _set_weight    Value hugo will use to order categories in the side menu. \u0026ldquo;Heavier\u0026rdquo; categories will appear to the bottom and \u0026ldquo;lighter\u0026rdquo; ones will appear towards the top. Be careful though that \u0026ldquo;0\u0026rdquo; means \u0026ldquo;disabled\u0026rdquo; so if you start setting weights for some categories set the ones you want to be on top with at least a value of \u0026ldquo;1\u0026rdquo;\nCan be filled in through the Docs exporter tab, in the Project Settings.\n description  String description           Default \u0026quot;\u0026quot;   Setter _set_description    Each category page gets a TOC with all the links that are inside it. If you want this auto generated page to have a description as well, use this field.\nCan be filled in through the Docs exporter tab, in the Project Settings.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/custom-resources/categoryoptionaldatadict/",
	"title": "CategoryOptionalDataDict",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Dictionary of CategoryOptionalData, to be saved in disk and used somewhat like a database by the plugin. This is what allows it to show the relevant fields in the Docs Exporter tab.\nIf you rename a category and the description disappears, look for the file in res://addons/eh_jogos.docs-exporter/shared_variables/dict_categories_optional_data.tres and it will still hold the description inside a key with the name of the old category.\nProperties    type property default value     Dictionary value {}    Signals  value_updated()  signal emitted whenever the dictionary changes.\n Properties Descriptions value  Array value           Default {}   Setter _set_value   Getter _get_value    Dictionary that only accepts [CategoryOptionalData] as values.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/categoryoptions/",
	"title": "CategoryOptions",
	"tags": [],
	"description": "",
	"content": "Inherits: VBoxContainer \u0026gt; BoxContainer \u0026gt; Container \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription UI Element for the category optional data used by the Docs Exporter tab. It\u0026rsquo;s through these that the user of the addon will be able to customize the weight and description of the Hugo export for each category they create.\nThis element will be populated by a CategoryOptionalData resource which will handle the persistence and the sharing of this data with any part of the code that needs it. Anything filled in the Docs Exporter tab will be saved in the file res://addons/eh_jogos.docs-exporter/shared_variables/dict_categories_optional_data.tres\nMethods    return type method signature     null populate_category_entry(String p_name, CategoryOptionalData p_data)    Method Descriptions populate_category_entry  void populate_category_entry(String p_name, CategoryOptionalData p_data)  Sets the [CategoryOptionalData] this element will be attached to and fill its fields with their value.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/components/collapsible/",
	"title": "Collapsible",
	"tags": [],
	"description": "",
	"content": "Inherits: Node \u0026gt; Object\nDescription Component with collapsible behavior to easily be attached to any UI needs. It takes two variables, the NodePath for a text element which will be handled to give feedback for collapsible options or state, and a NodePath for the node that must be toggled when collapsed.\nIf attached directly to a Button of any kind, it will auto connect with the \u0026ldquo;pressed\u0026rdquo; signal. If this behavior is not desirable, just uncheck the option should_auto_connect\nProperties    type property default value     NodePath text_element_path \u0026quot;\u0026quot;   NodePath collapsible_node_path \u0026quot;\u0026quot;   bool should_auto_connect True    Methods    return type method signature     null toggle_collapse()   null handle_text()    Properties Descriptions text_element_path  NodePath text_element_path           Default \u0026quot;\u0026quot;    NodePath for the feedback text.\n collapsible_node_path  NodePath collapsible_node_path           Default \u0026quot;\u0026quot;    NodePath for the node that must be toggled on/off when collapsed.\n should_auto_connect  bool should_auto_connect           Default True    Turn this off if you don\u0026rsquo;t want the component to try to auto connect with the pressed signal of the parent, in case the parent is a Button.\n Method Descriptions toggle_collapse  void toggle_collapse()  Will collapse/expand the target node, and also trigger a change in the text as additional feedback\n handle_text  void handle_text()  Prepends a \u0026ldquo;+\u0026rdquo; to the text when the element is closed (collapsed) or a \u0026ldquo;-\u0026rdquo; when the element is visible (expanded).\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/dictionaryvariable/",
	"title": "DictionaryVariable",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Dictionary that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     Dictionary value {}    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default {}   Setter _set_value    Shared Variable value\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/filepathlineedit/",
	"title": "FilePathLineEdit",
	"tags": [],
	"description": "",
	"content": "Inherits: HBoxContainer \u0026gt; BoxContainer \u0026gt; Container \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription Base class for any kind of PathLineEdit field. Receives a StringVariable, which will be responsible not only for the persistence of the data as well as sharing it with any part of the project that needs it.\nIn the addon there are 3 Scenes for different kind of paths that are used in the Docs Exporter tab, one for file paths in the file system, one for directories in the project, and another for directories in the file system.\nProperties    type property default value     String file_dialog_filter \u0026quot;\u0026quot;   bool is_removable False    Methods    return type method signature     null set_string_variable(StringVariable resource)    Signals  remove_string_variable(string_variable)   Properties Descriptions file_dialog_filter  String file_dialog_filter           Default \u0026quot;\u0026quot;    Filters for the File Explorer window.\n is_removable  bool is_removable           Default False   Setter _set_is_removable    Option to turn on/off the remove field button.\n Method Descriptions set_string_variable  void set_string_variable(StringVariable resource)  Sets the StringVariable this field will be attached to and populates the LineEdit with its value.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/hugomarkdowndocsexporter/",
	"title": "HugoMarkdownDocsExporter",
	"tags": [],
	"description": "",
	"content": "Inherits: MarkdownDocsExporter \u0026gt; JsonIO \u0026gt; Reference \u0026gt; Object\nDescription Exports md files configured to work with Hugo. It\u0026rsquo;s supposed to work with any theme, but it was only tested with hugo-theme-learn. It\u0026rsquo;s recommended to export the whole reference into a folder inside the \u0026ldquo;content\u0026rdquo; folder of your hugo site, but not directly in content, without any subfolder.\nIn addition to that, if you use @category, a subfolder with it\u0026rsquo;s own _index.md will be created for each category. You can order them and add descriptions to this pages in the Docs Exporter tab in the Project Settings.\nProperties    type property default value     String author \u0026quot;eh-jogos\u0026quot;   bool should_create_toc_on_category_pages Null    Methods    return type method signature     null export_hugo_site_pages(String reference_json_path, String export_path)    Constants  HUGO_CHAPTER_FRONT_MATTER = \u0026ldquo;\u0026mdash; title: {title} author: {author} date: {datetime} weight: {weight} \u0026mdash; \u0026ldquo; \u0026mdash; Front matter that will be used for category pages. HUGO_DEFAULT_FRONT_MATTER = \u0026ldquo;\u0026mdash; title: {title} author: {author} date: {datetime} weight: 1 \u0026mdash; \u0026ldquo; \u0026mdash; Front matter that will be used to default pages.  Properties Descriptions author  String author           Default \u0026quot;eh-jogos\u0026quot;    Author to be used across the site\u0026rsquo;s front matters.\n should_create_toc_on_category_pages  bool should_create_toc_on_category_pages  Enables / Disables table of contents in category pages.\n Method Descriptions export_hugo_site_pages  void export_hugo_site_pages(String reference_json_path, String export_path)  Takes in the reference json file path and an export path and generates and exports hugo formatted .md files.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/jsonio/",
	"title": "JsonIO",
	"tags": [],
	"description": "",
	"content": "Inherits: Reference \u0026gt; Object\nInherited by: MarkdownDocsExporter, ReferenceFormatter\nDescription Helper Class to read and write JSON files.\nMethods    return type method signature     String push_reading_file_error(Variant error, Variant p_file_path)   String push_parsing_file_error(Variant error, Variant p_file_path)   Dictionary get_dictionary_from_file(Variant p_file_path)   null write_dictionary_to_file(Dictionary content, String p_file_path)    Method Descriptions push_reading_file_error  String push_reading_file_error(Variant error, Variant p_file_path)  Pushes error to Godot\u0026rsquo;s debugger when there\u0026rsquo;s a file reading error.\n push_parsing_file_error  String push_parsing_file_error(Variant error, Variant p_file_path)  Pushes error to Godot\u0026rsquo;s debugger when there\u0026rsquo;s a file parsing error.\n get_dictionary_from_file  Dictionary get_dictionary_from_file(Variant p_file_path)  Reads json file and return a parsed dictionary\n write_dictionary_to_file  void write_dictionary_to_file(Dictionary content, String p_file_path)  Writes dictionary into a json file.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/markdowndocsexporter/",
	"title": "MarkdownDocsExporter",
	"tags": [],
	"description": "",
	"content": "Inherits: JsonIO \u0026gt; Reference \u0026gt; Object\nInherited by: HugoMarkdownDocsExporter\nDescription Main markdown exporter. It exports using github flavor markdown. These .md files can be used anywhere, but the links and the _Sidebar.md are configured to work best with github wiki format.\nProperties    type property default value     Dictionary links_db Null   Dictionary signatures_db Null   String key_to_use_for_link Null    Methods    return type method signature     Variant build_category_db(String reference_json_path, String export_path)   null export_github_wiki_pages(String reference_json_path, String export_path)    Constants  MD_BLOCK_INHERITANCE = \u0026quot; Inherits: {inheritance} \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;inheritance\u0026rdquo; block content model and styling for the exported .md file. MD_BLOCK_INHERITED_BY = \u0026quot; Inherited by: {inherited_by} \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;inherited by\u0026rdquo; block content model and styling for the exported .md file. MD_BLOCK_DESCRIPTION = \u0026ldquo;## Description {description} \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Description\u0026rdquo; block content model and styling for the exported .md file. MD_BLOCK_PROPERTIES_TABLE_TITLE = \u0026ldquo;## Properties | type | property | default value | | \u0026mdash;- | \u0026mdash;\u0026mdash;\u0026ndash; | \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- | \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Properties\u0026rdquo; table header content model and styling for the exported .md file. MD_BLOCK_PROPERTIES_TABLE_LINE = \u0026ldquo;| {type} | {name} | {default_value} | \u0026ldquo; \u0026mdash; Defines the property table lines content model and styling for the exported .md file. MD_BLOCK_METHODS_TABLE_TITLE = \u0026ldquo;## Methods | return type | method signature | | \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; | \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- | \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Methods\u0026rdquo; table header content model and styling for the exported .md file. MD_BLOCK_METHOD_TABLE_LINE = \u0026ldquo;| {type} | {siganture} | \u0026ldquo; \u0026mdash; Defines the method table lines content model and styling for the exported .md file. MD_BLOCK_SIGNALS_TITLE = \u0026ldquo;## Signals \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Signals\u0026rdquo; header content model and styling for the exported .md file. MD_BLOCK_SIGNALS_LINE = \u0026ldquo;- {name}({arguments}) {description} \u0026mdash;\u0026mdash;\u0026mdash; \u0026ldquo; \u0026mdash; Defines the individial signal content model and styling for the exported .md file. MD_BLOCK_ENUMS_TITLE = \u0026ldquo;## Enumerations \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Enumerations\u0026rdquo; header content model and styling for the exported .md file. MD_BLOCK_ENUM_NAME_LINE = \u0026ldquo;enum {name}: \u0026ldquo; \u0026mdash; Defines the individial enum name content model and styling for the exported .md file. MD_BLOCK_ENUM_KEY_LINE = \u0026ldquo;- {signature} \u0026ldquo; \u0026mdash; Defines the individial enum keys content model and styling for the exported .md file. MD_BLOCK_CONSTANTS_TITLE = \u0026ldquo;## Constants \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Constants\u0026rdquo; header content model and styling for the exported .md file. MD_BLOCK_CONSTANTS_LINE = \u0026ldquo;- {signature} \u0026mdash; {description} \\n\u0026rdquo; \u0026mdash; Defines the individial constant content model and styling for the exported .md file. MD_BLOCK_PROPERTY = \u0026ldquo;### {name} - {property_signature} {table} {description} \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash; Defines the individial property definition content model and styling for the exported .md file. MD_BLOCK_PROPERTIES_DESCRIPTION = \u0026ldquo;## Properties Descriptions \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Properties Descriptions\u0026rdquo; header content model and styling for the exported .md file. MD_BLOCK_METHOD = \u0026ldquo;### {name} - {method_signature} {description} \u0026mdash;\u0026mdash;\u0026mdash;\u0026quot; \u0026mdash; Defines the individial method definition content model and styling for the exported .md file. MD_BLOCK_METHOD_DESCRIPTION = \u0026ldquo;## Method Descriptions \u0026ldquo; \u0026mdash; Defines the \u0026ldquo;Method Descriptions\u0026rdquo; header content model and styling for the exported .md file. GODOT_DOCS_BASE_URL = \u0026ldquo;https://docs.godotengine.org/en/stable/classes/class_%s.html\u0026quot; \u0026mdash; Godot\u0026rsquo;s Documentatiion base url for forming links.  Properties Descriptions links_db  Dictionary links_db  Dictionary that serves as database for links and is built during the json export process\n signatures_db  Dictionary signatures_db  Dictionary that serves as database for properties and methods signatures and is built during the json export process\n key_to_use_for_link  String key_to_use_for_link  If which key from the links database the exporter should use. Github exporter will use \u0026ldquo;local_path\u0026rdquo; which just consists of repeating the file name, without extesnion. Hugo exporter will use \u0026ldquo;full_path\u0026rdquo; which will take folder structure into account.\n Method Descriptions build_category_db  Variant build_category_db(String reference_json_path, String export_path)  Reads json reference and creates a category database with the current user defined categories in use.\n export_github_wiki_pages  void export_github_wiki_pages(String reference_json_path, String export_path)  Takes in the reference json file path and an export path and generates and exports github wiki formatted .md files.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/pathlineedit/",
	"title": "PathLineEdit",
	"tags": [],
	"description": "",
	"content": "Inherits: LineEdit \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription LineEdit for receiving file or folder paths. Has a small customization just to scroll the text to the end whenever a file or folder is selected through the File Explorer instead of typed in.\nMethods    return type method signature     null set_text(String string)    Method Descriptions set_text  void set_text(String string)  Sets the text and scrolls it to the end position.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/referenceformatter/",
	"title": "ReferenceFormatter",
	"tags": [],
	"description": "",
	"content": "Inherits: JsonIO \u0026gt; Reference \u0026gt; Object\nDescription Sweepes the project and generates the json reference for the codebase. Started this based on ReferenceCollector.gd from GDQuest\u0026rsquo;s docs maker, but customized it to add to the json some more information I wanted to use.\nMethods    return type method signature     null export_formatted_reference_json(Array directories, Array patterns, bool is_recursive, String save_path)    Constants  METADATA = {category:@category:} \u0026mdash; Currently recognized metadata that you can use in the comments, while documenting your code. @category: - will group pages during export, and save them together in a folder with the same name as the category. If you want to use subcategories you can treat it as path. For example # @category: CategoryA/SubcategoryB will generate a folder named \u0026ldquo;CategoryA\u0026rdquo; and inside it a folder named \u0026ldquo;SubcategoryB\u0026rdquo;. Only works in the main description for the file.  Method Descriptions export_formatted_reference_json  void export_formatted_reference_json(Array directories, Array patterns, bool is_recursive, String save_path)   "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/resizabletextedit/",
	"title": "ResizableTextEdit",
	"tags": [],
	"description": "",
	"content": "Inherits: TextEdit \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription TextEdit with a corner that can be dragged and resized. Used in different parts of the Docs Exporter tab in the Project Settings.\n"
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/stringarrayvariable/",
	"title": "StringArrayVariable",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Array of Strings that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     Array value []    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default []   Setter _set_value    Shared Variable value\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/stringvariable/",
	"title": "StringVariable",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription String that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     String value \u0026quot;\u0026quot;    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default \u0026quot;\u0026quot;   Setter _set_value    Shared Variable value\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/stringvariablearray/",
	"title": "StringVariableArray",
	"tags": [],
	"description": "",
	"content": "Inherits: Resource \u0026gt; Reference \u0026gt; Object\nDescription Array of StringVariable that can be saved in disk like a custom resource. Used as [Shared Variables] so that the data it holds can be accessed and modified from multiple parts of the code. Based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk.\nProperties    type property default value     Array value []    Methods    return type method signature     null push(Variant element)   null erase(StringVariable element)   Array get_string_array()    Signals  value_updated()  Signal emitted when the Variable\u0026rsquo;s value is updated.\n Properties Descriptions value  Array value           Default []   Setter _set_value   Getter _get_value    Shared Variable value\n Method Descriptions push  void push(Variant element)   erase  void erase(StringVariable element)   get_string_array  Array get_string_array()   "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/stringvariablelineedit/",
	"title": "StringVariableLineEdit",
	"tags": [],
	"description": "",
	"content": "Inherits: LineEdit \u0026gt; Control \u0026gt; CanvasItem \u0026gt; Node \u0026gt; Object\nDescription LineEdit Field for simple StringVariables.\nProperties    type property default value     bool is_removable False    Methods    return type method signature     null set_string_variable(StringVariable resource)    Signals  remove_string_variable(string_variable)   Properties Descriptions is_removable  bool is_removable           Default False   Setter _set_is_removable     Method Descriptions set_string_variable  void set_string_variable(StringVariable resource)  Sets the StringVariable this field will be attached to and populates the LineEdit with its value.\n "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/quick_start/documenting/",
	"title": "Documenting your Code",
	"tags": [],
	"description": "",
	"content": "So before you export any documentation, first your code needs to be documented! And that is simple and easy! Just add comments on the lines directly above any variable, constant, enum, signal or function declaration that you want to document!\nThese comments will be gathered together with the signatures of these declarations and transformed into a documentation similar to what you see in the official docs.\nIt\u0026rsquo;s important to note though that only scripts with a class_name defined gets their documentation generated and exported.\nLinks You can create links between your documentation pages by simply doing [YourClassName] or links to Godot\u0026rsquo;s official documentation by doing for example [AnimationSprite]. You can also link to any point inside the same file by doing for example [function_name] or to any point in another file by doing [YourClassName.function_name].\nFile description and Categories To add a \u0026ldquo;description\u0026rdquo; for a class, put the comments at the very top of the file, even above the tool keyword if you\u0026rsquo;re using it.\nAlso in the \u0026ldquo;description\u0026rdquo; comments, you can use the # @category: your_category to organize the exported code into folders and group them. You can have subcategories by adding a slash like # @category: your_category/your_subcategory\nWhen exporting to GitHub wikis, these categories will only be used to organize the links in the sidebar\nBut when exporting to Hugo, each category will get it\u0026rsquo;s own page, with it\u0026rsquo;s own description and table of contents, and you\u0026rsquo;ll also have the option to order them in the navigation menu, using the Docs Exporter tab and the weight options.\nBut how do you use the Docs Exporter Tab? That\u0026rsquo;s easy too, and it\u0026rsquo;s next!\n"
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/custom-resources/",
	"title": "Custom Resources",
	"tags": [],
	"description": "",
	"content": "Custom Resources used by the plugin.\n CategoryOptionalData CategoryOptionalDataDict  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/quick_start/exporting/",
	"title": "Exporting your Documentation",
	"tags": [],
	"description": "",
	"content": "The Docs Exporter tab has three sections, the first one will look inside your project and generate a json file with your code reference. The other two will take this json, format it into many markdown pages, creating links between the pages, and also links back to Godot\u0026rsquo;s official documentation when applicable, organize the files into categories if you\u0026rsquo;re using them and export them to a destination of your choosing.\nGenerating the json For the first one, the json Section, you need to choose which folder or folders of your project you want to scan, then which kind of files you want to filter for, if the scan should be recursive (scan subfolders) or not, and finally, where to save the result.\nIf you\u0026rsquo;re using git, the addon folder already has a .gitignore to ignore a reference.json file, so you can save there if you want.\nAfter setting all that, click on \u0026ldquo;Generate Json Reference\u0026rdquo; button.\nExporting to GitHub Wiki After generating the Json, if you want to export to a GitHub Wiki, just choose to which folder you want to export the markdown files, and press \u0026ldquo;Export GitHub Wiki Docs Pages\u0026rdquo;.\nI usually include at least a \u0026ldquo;Home\u0026rdquo; page in the GitHub wiki besides the code reference, so I use the \u0026ldquo;Prepend to Sidebar\u0026rdquo; field to link all the pages in the GitHub wiki that are not auto-generated by the plugin.\nWhenever you update your code or your comments, generate the json again and export the documentation again. That\u0026rsquo;s it!\nIf you need help with setting up GitHub wiki or cloning it locally take a look at the official documentation\nExporting to Hugo After generating the Json, if you want to export to Hugo, just choose to which folder you want to export the markdown files, and press \u0026ldquo;Export Hugo Docs Pages\u0026rdquo; button. For hugo it\u0026rsquo;s best if you don\u0026rsquo;t simply export directly into the \u0026ldquo;content\u0026rdquo; folder, but rather in a sub-folder in there, like \u0026ldquo;content/reference\u0026rdquo; or something of the like.\nAlso if you\u0026rsquo;re using categories in your documentation, you can click \u0026ldquo;Build Categories Db\u0026rdquo; button before exporting, and all the categories you\u0026rsquo;re currently using will appear for you to customize their weights and descriptions.\nWhenever you update your code or your comments, generate the json again and export the documentation again. That\u0026rsquo;s it!\nSome useful links if you need help setting up a Hugo site:\n Hugo Docs - Quick Start Hugo Docs - Setting up Github pages Hugo Learn Theme - a good theme for documentation  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/ui-elements/",
	"title": "UI Elements",
	"tags": [],
	"description": "",
	"content": "UI Elements used in the Docs Exporter tab.\n ResizableTextEdit StringVariableLineEdit BoolVariableCheckbox CategoryOptions PathLineEdit FilePathLineEdit  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/quick_start/help/",
	"title": "Help and Support",
	"tags": [],
	"description": "",
	"content": "I hope this plugin is useful and helps you out in any way. If you encounter any bugs, or need help with something in the plugin, please open an issue on GitHub!\nIf you liked the project and want to contribute to it, feel free to send me a message or send in a pull request! Also this project is under MIT License, so use it however you want, in any commercial projects, and if possible, link back to this page or to it\u0026rsquo;s GitHub project page.\nIf you liked the project and want to support it, consider tweeting about it or recommending it to friends who might find this plugin useful!\nAlso, just a message saying thanks or showing off the cool docs you exported with this plugin does a great deal to make me know this is useful to someone else, which do makes me happy!\nBut if you want to support it with small donations, you can buy my game on steam, send me a tip on ko-fi or take a look at my patreon!\n"
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": "Custom compenents with logic that can be shared between different kinds of nodes.\n Collapsible  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/shared-variables/",
	"title": "Shared Variables",
	"tags": [],
	"description": "",
	"content": "Simple Custom Resources that can be saved to disk an represent only one variable of one type. Since Rsources are only loaded once and shared between all their references in code, it is used as some kind of shared variables so that the data it holds can be accessed and modified from multiple parts of the code and always stays in sync.\nThis ones are saved in a separate folder because they\u0026rsquo;re all custom resources that represent basic types and can be reused between projects and different plugins, so that If you already have this folder from another plugin, you won\u0026rsquo;t have any class_name conflicts and will only have to import the scripts you don\u0026rsquo;t have.\nIn this plugin it is basically used so that you can edit data in the Docs Exporter Tab and have this data easily accessible by the code.\nIt is based on the idea of Unity\u0026rsquo;s Scriptable Objects and Ryan Hipple\u0026rsquo;s Unite Talk about architeting games around scriptable objects.\nReference Links:\n Text How To Unite Talk Video Ryans Example Repository  TOC:\n ArrayVariable StringArrayVariable BoolVariable DictionaryVariable StringVariable StringVariableArray  "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " HugoMarkdownDocsExporter JsonIO MarkdownDocsExporter ReferenceFormatter Custom Resources  CategoryOptionalData CategoryOptionalDataDict   UI Elements  ResizableTextEdit StringVariableLineEdit BoolVariableCheckbox CategoryOptions PathLineEdit FilePathLineEdit   Components  Collapsible   Shared Variables  ArrayVariable StringArrayVariable BoolVariable DictionaryVariable StringVariable StringVariableArray    "
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://eh-jogos.github.io/eh_DocsExporter/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]